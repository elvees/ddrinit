.. SPDX-License-Identifier: GPL-2.0-or-later

:orphan:

.. _vmmu-label:

=======================================================
Трансляция 32-битных адресов в 64-битные с регистрацией
=======================================================

.. contents:: Содержание
   :local:
   :backlinks: entry

О документе
------------

Документ содержит описание алгоритма работы и интерфейса драйвера VMMU для СнК MCom-03.

Описание интерфейса
-------------------

Драйвер реализует упрощенный алгоритм регистрации и дерегистрации окон трансляции 32-битных
адресов в 64-битные размером 2MB. Драйвер используется для доступа в DDR High со стороны RISC0.

.. note:: ниже рассматривается выделение только окон 2MB. Не предусмотрено выделение
   окон большего размера.

Драйвер предоставляет следующий интерфейс:

.. function:: vmmu_t* vmmu_get_registers(void)

   Функция получения контекста устройства VMMU;

.. function:: void vmmu_init(vmmu_t* dev, uintptr_t ptw_base_addr)

   Функция инициализации трансляции VMMU. Используются 12KiB данных, т.е. три таблицы по 4KiB.
   Настраивает таблицу по адресу ptw_base_addr на трансляцию 1:1 и включает режим трансляции;

.. function:: int vmmu_map_64bit_address(vmmu_t* dev, uintptr_t vAddr32, uint64_t pAddr64)

   Функция отображения адресов. Функция создает отображение базового физического адреса pAddr64 на
   желаемый базовый виртуальный адрес vAddr32. pAddr64 должен быть выровнен на границу 4K.
   Возвращает код ошибки: (0) - в случае успеха; (-EVMMUCFG) - в случае ошибки;

.. function:: void vmmu_deinit(vmmu_t* dev)

   Функция деинициализации. Выключает режим трансляции;


Для создания "окон" подходит любой неиспользуемый в ПО ДК адресный интервал подходящего объема.
В соответствии с Руководством Пользователя для уровня доступа "trusted" выделено два диапазона
памяти DDR Low Trusted 0 и DDR Low Trusted 1 по 512 MB каждый, т.е. в общей сложности 1 GB.
Так как ПО ДК использует 256MB из DDR Low Trusted 0, то 768 MB остаются зарезервированными,
не используются и могут быть задействованы для создания отображения.

Например такой диапазон адресов: DDR Trusted Low 1, начало - 0xC000_0000, размер 512MB,
256х2MB блоков.

Адрес начала виртуальных адресов и количество доступных 2 МБ блоков заданы опциями конфигурации
CONFIG_VMMU_VIRT_BASE_START и CONFIG_VMMU_VIRT_SLOT_COUNT.

Для хранения данных о регистрации блоков используется сама таблица трансляции,
а именно в третьей таблице в структуре PTE используется User_Defined-область
со значением 0 - ячейка свободна, 1 - ячейка занята.

Работа алгоритма
----------------

При запросе на инициализацию, ``vmmu_init`` выполняет следующее:

#. Создает таблицы трансляции уровней 3 (512GB), 2 (1GB), 1 (2MB).
   Расположение таблиц должно быть выровнено на границу в 512 байт.

#. В первой таблице ненулевое - PTE[0], non-leaf, указывает на таблицу уровня 2.

#. Во второй таблице ненулевые - PTE[0] - PTE[3]: три таблицы - типа leaf,
   трансляция "1:1", одна таблица - non-leaf, которая соответствует CONFIG_VMMU_VIRT_BASE_START
   и указывает на таблицу уровня 1.

#. В третьей таблице, уровня 1, заполняет все 512 PTE - все записи типа leaf,
   трансляция "1:1". Заполняет PTE::User_Defined нулями - все ячейки свободны.

#. Включает режим трансляции.

При запросе на регистрацию окна, ``vmmu_map_64bit_address`` выполняет следующее:

#. Вычисляет номер ячейки nDesired=(vAddr32 - CONFIG_VMMU_VIRT_BASE_START)/2MB.

#. Если ячейка nDesired выходит за рамки диапазона или уже занята, возвращает ошибку (-EVMMUCFG).

#. По индексу ячейки nDesired в таблице уровня 1 формирует PTE[ nDesired ]:
   PPN3, PPN2, PPN1 берутся из pAddr64, PPN0 - не используется, заполняется нулем.

#. Инвалидирует кэш.

#. Помечает nDesired как занятую и возвращает успех (0).

При запросе на деинициализацию, ``vmmu_deinit`` выполняет следующее:

#. Отключает трансляцию.

#. Инвалидирует кэш.


Схематично алгоритм изображён на схеме ниже.

.. uml:: vmmu.puml
   :scale: 50 %
