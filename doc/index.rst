.. SPDX-License-Identifier: GPL-2.0-or-later

=====================================================
Инициализатор DDR *ddrinit*. Руководство программиста
=====================================================

.. contents:: Содержание
   :local:
   :backlinks: entry

О документе
===========

Документ содержит описание ПО для инициализации DDR-подсистемы СнК MCom-03/Solaris.

Основные особенности
====================

Поддерживаемые модули
---------------------

СнК Solaris:

* AURORA_MB v1.2;
* B3-V3U r1.0;
* RoboDeus SHB r1.5;
* Solaris BuB r1.0.

СнК MCom-03:

* ECAM03BL 1.0, ECAM03DM r1.0;
* EGW-PM r1.0;
* ELV-MC03-Q7 r1.0;
* ELV-MC03-SMARC r1.0, ELV-MC03-SMARC r1.1;
* MCom-03 BuB r1.3, MCom-03 BuB r1.5;
* Trustphone PM r1.5.

Возможности
-----------

* Инициализация DDR-подсистемы СнК MCom-03/Solaris.

* Сборка для архитектур CPU MIPS64R6, MIPS32, Aarch64.

* Инициализация типа памяти DDR4:

  * поддержка скоростей передачи данных: 1333, 1600, 1866, 2133 MT/s.

  * поддержка одноранговых и двухранговых памятей.

* Инициализация типа памяти LPDDR4:

  * поддержка скоростей передачи данных: 66, 133, 266, 533, 1066, 1600, 2133 MT/s.

  * поддержка одноранговых и двухранговых памятей.

* Инициализация модулей нерегистровой памяти UDIMM__.

  __ https://en.wikipedia.org/wiki/DIMM

* Установка временных параметров (таймингов) DDR-памяти:

  * считанных из SPD__ EEPROM (согласно стандарту JESD21-C секции 4.1) по I2C-интерфейсу;

    __ https://en.wikipedia.org/wiki/Serial_presence_detect

  * заданных на этапе конфигурации ПО.

* Выполнение одномерных (1D) тренингов DDR-подсистемы для оптимизации временных задержек:

  * Read gate,
  * Write leveling (DQS/CK skew compensation),
  * Read 1D,
  * Write 1D,
  * Read per-bit DQ deskew (aka "per-bit leveling", "DQ calibration" or "DQ-DQS deskew"),
  * Max read latency,
  * Command/Address (только для LPDDR4).

* Передача информации о количестве инициализированный памяти в загрузчик U-Boot.

* Настройка частот AXI-портов DDR-подсистемы.

* Для СнК Solaris:

  * работа СнК в четырехканальном__ режиме чередования адресов (4-channel interleaving);

    __ https://en.wikipedia.org/wiki/Multi-channel_memory_architecture

  * сборка для режимов загрузки СнК "No start", "CPU0 Direct boot", "CPU0 Secure boot";

  * в режиме загрузки "No start" после инициализации DDR-подсистемы исполняется
    инструкция программной точки останова, что позволяет через JTAG-адаптер определить
    момент завершения инициализации.

* Для СнК MCom-03:

  * работа СнК в двухканальном режиме чередования адресов (2-channel interleaving);

  * включение питания DDR-памяти, подключенной к DDR-контроллеру 1 (только для модулей
    ELV-MC03-SMARC).

* Возможности отладки:

  * инициализация UART, печать информационных и отладочных сообщений в UART;
  * лог обращений к регистрам.

* Управление конфигурацией сборки с использованием Kconfig__: количество контроллеров DDR,
  скорости передачи, использование SPD EEPROM, выполнение тренингов и т.п.

  __ https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html

Не поддерживается:

* Инициализация типов памятей DDR3, LPDDR3.

* Скорости передачи данных:

  * выше 2133 MT/s;
  * ниже 1333 MT/s (для DDR4), 66 MT/s (для LPDDR4).

* Инициализация четырехранговой памяти.

* Инициализация DIMM-модулей в ненулевых DIMM-разъемах каждого DDR-контроллера.

* DRAM burst inverleave.

* Выполнение двумерных (2D) тренингов DDR-подсистемы (тренинг Vref).

* Коррекция ошибок встроенным ECC.

* Проверка четности шины адреса/команд (Comman/Address parity check).

* Инициализация типов модулей RDIMM__, LRDIMM, 3DS DIMM.

  __ https://en.wikipedia.org/wiki/Registered_memory

* Работа СнК в случае отсутствия DIMM-модулей или ошибки инициализации DDRMC0.

* Динамическое определение типа памяти из SPD EEPROM, тип памяти задается на этапе
  конфигурирования ПО.

* Чтение параметров DDR-подсистемы из eFUSE.

* Для СнК Solaris:

  * работа СнК в двухканальном режиме чередования адресов;
  * независимая установка частоты DDR-каналов 1 и 2, 3 и 4;
  * чтение конфигурационных сигналов (bootstaps) для определения режима чередования адресов.

Исходные коды
=============

Получение
---------

TBD

Описание
--------

Дерево исходных кодов представлено на диаграмме::

  ├── configs/
  │   ├── ...
  │   ├── solarisbub_defconfig
  │   └── mcom03bub_defconfig
  ├── doc/
  ├── fragments/
  │   ├── mcom03/
  │   │   ├── ...
  │   │   └── bootrom.fragment
  │   └── solaris/
  │       └── ...
  ├── include/
  ├── Kconfig
  ├── Makefile
  ├── scripts/
  └── src/

Описание компонентов исходного кода:

* ``configs`` --- директория с файлами конфигурации ПО для различных модулей на основе
  MCom-03/Solaris;

* ``doc`` --- директория с файлами документации;

* ``fragments`` --- директория, содержащая фрагменты конфигурации сборки;

* ``include`` --- директория, содержащая все заголовочные файлы проекта;

* ``Kconfig`` --- корневой Kconfig-файл;

* ``Makefile`` --- Makefile для сборки проекта;

* ``scripts`` --- директория с дополнительными утилитами для конфигурирования и сборки проекта;

* ``src`` --- директория с исходным кодом.

Сборка
======

Для сборки ПО необходимо:

#. Настроить среду сборки;

#. Сконфигурировать ПО;

#. Запустить сборку.

Среда сборки
------------

Для настройки среды сборки выполнить:

#. Установить кросс-компилятор соответствующий целевой архитектуре.

#. Установить пакет *kconfiglib*::

     pip install --user kconfiglib

#. Добавить путь до кросс-компилятора в переменную ``PATH``.

#. Добавить путь до скриптов *kconfiglib* в переменную ``PATH``::

     export PATH=~/.local/bin/:$PATH

#. Установить префикс кросс-компилятора в переменную ``CROSS_COMPILE``.

Конфигурирование
----------------

Установить конфигурацию для выбранного модуля::

  make <board>_defconfig


Конфигурация может быть установлена с использованием одного или нескольких фрагментов.
Если фрагментов несколько, они должны быть разделены символом ":"::

  make <board>_defconfig FRAGMENTS="<fragment0>[:<fragment1>: ... :<fragmentN>]"

Фрагменты располагаются в подкаталогах СнК, для которых они применимы:

* ``mcom03`` --- для СнК MCom-03;

* ``solaris`` --- для СнК Solaris;

.. note:: Поиск фрагментов осуществляется в подкаталоге платформы,
  объявленной в defconfig.

ПО содержит следующие файлы фрагментов:

* ``bootrom.fragment`` --- фрагмент для загрузки СнК с помощью BootROM

Пример установки конфигурации для модуля ELV-MC03-SMARC с загрузкой с помощью BootROM::

  make elvmc03smarc_defconfig FRAGMENTS="bootrom"

Если для модуля не существует конфигурации, необходимо ее создать
(подробнее см. `Портирование на модуль`_).

Для изменения конфигурации выполнить::

  make menuconfig

Описание доступных опций конфигурации приведено в главе `Опции конфигурации`_.

Запуск сборки
-------------

Для запуска сборки выполнить::

  make && make install

Результаты сборки
-----------------

Результатом сборки ПО является бинарный файл ``src/ddrinit.bin``, который содержит код всех этапов
инициализации DDR-подсистемы (подробнее см. `Этапы инициализации DDR`_);

Этапы инициализации DDR
=======================

DDR-подсистемы СнК инициализируются последовательно. Если инициализация подсистемы завершилась с
ошибкой, начнется инициализация следующей подсистемы. Инициализация DDR завершается корректно, если
была успешно инициализирована DDR-подсистема 0.

Процедура инициализации DDR-подсистемы состоит из 4 этапов. Этапы 0, 1, 3 являются обязательными,
этап 2 является необязательным. На данный момент этап 2 не поддерживается.

Этап 0 --- первичная инициализация СнК и DDR PHY:

#. Первичная инициализация СнК MCom-03/Solaris:

   #. Вывод необходимых подсистем из состояния сброса.
   #. Включение частот, необходимых для запуска загрузчика следующего уровня.
   #. Инициализация UART.
   #. Инициализация I2C и чтение SPD EEPROM (если включена опция ``CONFIG_SPD_EEPROM``),
      I2С-адреса DIMM-модулей определяются конфигурацией, подробнее см. `Опции конфигурации`_.

#. Установка сброса DDR-контроллера (assert presetn, core_ddrc_rstn).
#. Настройка PLL, включение тактовых частот DDR-контроллера, DDR-PHY.
#. Снятие сброса APB-порта (configuration port) DDR-контроллера (deassert presetn).
#. Первичная инициализация DDR-контроллера: запись таймингов памяти, настройка трансляции адресов
   AXI/DRAM.
#. Снятие сброса DDR-контроллера (deassert core_ddrc_rstn).
#. Снятие сброса DDR-PHY.
#. Первичная инициализация DDR-PHY.

Этап 1 --- одномерный трейнинг:

#. Загрузка прошивки инструкций для проведения одномерных тренингов в память DDR-PHY IMEM.
#. Загрузка прошивки данных для проведения одномерных тренингов в память DDR-PHY DMEM.
#. Загрузка конфигурационных параметров для проведения одномерных тренингов в память DDR-PHY DMEM.
#. Запуск одномерных тренингов для DDR4 (в порядке исполнения):

   #. Read Gate,
   #. Write Leveling,
   #. Read 1D,
   #. Write 1D,
   #. Read deskew,
   #. Max read latency,
   #. Command/Address (только для LPDDR4).

#. Получение и анализ результатов тренингов.

Этап 2 (опциональный) --- двумерный трейнинг:

#. Загрузка прошивки инструкций для проведения двумерных тренингов в память DDR-PHY IMEM.
#. Загрузка прошивки данных для проведения двумерных тренингов в память DDR-PHY DMEM.
#. Загрузка конфигурационных параметров для проведения двумерных тренингов в память DDR-PHY DMEM.
#. Запуск процедуры двумерных тренингов.
#. Получение и анализ результатов тренингов.

Этап 3 --- финальная инициализация СнК и DDR PHY:

#. Финальная инициализация DDR-PHY.
#. Финальная инициализация DDR-контроллера.

   .. note:: В случае отсутствия DIMM-модуля или ошибки инициализации памяти, подключенной к
      контроллеру DDRMC0, инициализатор переходит в бесконечный цикл, загрузка останавливается.

#. Включение режима чередования адресов.

#. Настройка драйвера VMMU СнК MCom-03 для отображения 32-битных адресов
   CONFIG_MEM_REGIONS_VIRT_ADDR в 64-битные CONFIG_MEM_REGIONS_PHYS_ADDR.
   Подробнее см. :ref:`vmmu-label`.

#. Запись информации о памяти, инициализированной каждым DDR-контроллером (размер, начало доступной
   памяти), в область DDR по адресу CONFIG_MEM_REGIONS_PHYS_ADDR (должен совпадать с адресом
   указанным в конфигурации U-Boot одноименной опцией).

#. Инициализация коммутатора NOC СнК Solaris:

   #. Настройка L3-кэша (LLC).
   #. Настройка ССС и включение когерентности GPU и Daimyo CPU.
   #. Настройка IOMMU.

.. note:: Чтение конфигурационных сигналов (bootstraps) для определения режима чередования адресов
   не поддерживается. 4-канальный режим чередования адресов включается автоматически, если
   4 контроллера DDR инициализированы успешно.

Опции конфигурации
==================

Опции конфигурации разделены на три типа:

#. Базовые --- опции значительно изменяющие конфигурацию ПО. Описание опций доступно
   в файле ``src/Kconfig.basic``.

#. Расширенные --- опции для тонкой настройки параметров DDR. Значения по умолчанию
   расширенных опций подходят для большиства модулей. Описание опций доступно в
   файле ``src/Kconfig.advanced``.

#. Опции сборки. Описание доступно в файле ``Konfig.build``.

Портирование
============

Портирование на СнК
-------------------

Для портирования ПО на новую СнК необходимо:

#. Добавить поддержку СнК в файл ``src/plat/Kconfig.plat``.

#. Реализовать функции, описанные в файле ``include/plat/plat.h``. Пример реализации функций для
   платформы Solaris находится в файле ``src/plat/solaris/solaris.c``.

Портирование на модуль
----------------------

Для портирования ПО на новый модуль необходимо:

#. Сконфигурировать ПО, использую конфигурацию для похожего модуля::

     make <board>_defconfig

#. Модифицировать базовые опции конфигурации::

     make menuconfig

#. Сохранить конфигурацию для нового модуля::

     make savedefconfig && mv defconfig configs/<new_board>_defconfig

Список протестированных DIMM-модулей
====================================

* HyperX HX426C16FB3K2/16:

  * 1 ранг;
  * 16 ГБ (комплект из двух 8 ГБ);
  * макс. скорость передачи 2666 MT/s.

* HyperX HX432C16FB3/16:

  * 2 ранга;
  * 16 ГБ;
  * макс. скорость передачи 3200 MT/s.
